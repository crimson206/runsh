print("""'#!/bin/bash\n\n# @description: Create and push git tag\n# @arg tag_name: Tag name to create\n# @option re-tag,r [flag]: Force re-tag if tag already exists\n\n# USER SETTING\n\n# <SCRIPT-RUNNER>\nRE_TAG=${CLI_RE_TAG:-0}\nTAG_NAME=${1:-}\n# </SCRIPT-RUNNER>\n\n# (추가 설정이 필요하면 여기에)\n\nset -e\n\necho "=== Git Tagging ==="\n\n# 태그명 확인\nif [ -z "$TAG_NAME" ]; then\n    echo "Error: Tag name is required"\n    echo "Usage: git_tag <tag_name>"\n    exit 1\nfiW\n\n# 현재 브랜치 확인\nBRANCH=$(git branch --show-current)\necho "Current branch: $BRANCH"\n\n# 변경사항 확인\nif ! git diff --quiet || ! git diff --cached --quiet; then\n    echo "Warning: You have uncommitted changes"\n    read -p "Continue anyway? (y/N): " -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        echo "Cancelled"\n        exit 0\n    fi\nfi\n\n# 기존 태그 확인\nif git tag -l | grep -q "^$TAG_NAME$"; then\n    if [ "$RE_TAG" = "1" ]; then\n        echo "Deleting existing tag: $TAG_NAME"\n        git tag -d "$TAG_NAME"\n        git push origin ":refs/tags/$TAG_NAME" 2>/dev/null || true\n    else\n        echo "Error: Tag \'$TAG_NAME\' already exists"\n        echo "Use --re-tag to overwrite"\n        exit 1\n    fi\nfi\n\n# 태그 생성\necho "Creating tag: $TAG_NAME"\ngit tag "$TAG_NAME"\n\n# 푸시\necho "Pushing tag to origin..."\ngit push origin "$TAG_NAME"\n\necho "✅ Tag \'$TAG_NAME\' created and pushed successfully!"'""")